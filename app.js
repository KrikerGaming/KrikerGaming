 //------------------------------------------------------------------------------------\\
const { VK, Keyboard} = require('vk-io')
const { QuestionManager } = require('vk-io-question');
const vk = new VK({
    token: 'vk1.a.gEt3Pmk1wkTn0dhQoV-neJ18OVKcMLSQkMzbK3tBnjf0UhxKqU-6zzL4-UVvqKjCPrbGiWuGXY69Qu01vAwDGkFtAp1vLEKRdyXioPgyQhD3oBrWzSS3SrlPqoizWrOPLuVK3S31tW-9wfY0ANSXicSLG_jlB1B8lzRk2emGkUjzeWUmf2wAuTc3kWkjrSbG5s44PQFJlS4W-4Jpellmtg',
    pollingGroupId: 218697880
})
const questionManager = new QuestionManager();
const fs = require('fs')
const commands = [];
//const request = require('request');
const chalk = require('chalk'); // –º–æ–¥—É–ª—å 
const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database('users.db');

 //------------------------------------------------------------------------------------\\
let startedproc = 1
	while(startedproc < 99) {
		startedproc += Number(1)
	console.log(chalk.keyword(`orange`).bold.underline(`¬ª Starting Bot...`) + chalk.red.bold.underline(`${startedproc}%`)) // –ø–æ –ø—Ä–∏–∫–æ–ª—É
}
 //------------------------------------------------------------------------------------\\
vk.updates.use(questionManager.middleware);
 //------------------------------------------------------------------------------------\\
var uptime = { sec: 0, min: 0, hours: 0, days: 0 }
 //------------------------------------------------------------------------------------\\
const utils = {
	sp: (int) => {
		int = int.toString();
		return int.split('').reverse().join('').match(/[0-9]{1,3}/g).join('.').split('').reverse().join('');
	},
	rn: (int, fixed) => {
		if (int === null) return null;
		if (int === 0) return '0';
		fixed = (!fixed || fixed < 0) ? 0 : fixed;
		let b = (int).toPrecision(2).split('e'),
			k = b.length === 1 ? 0 : Math.floor(Math.min(b[1].slice(1), 14) / 3),
			c = k < 1 ? int.toFixed(0 + fixed) : (int / Math.pow(10, k * 3) ).toFixed(1 + fixed),
			d = c < 0 ? c : Math.abs(c),
			e = d + ['', '—Ç—ã—Å', '–º–ª–Ω', '–º–ª—Ä–¥', '—Ç—Ä–ª–Ω', '—Ç—Ä–ª–¥'][k];

			e = e.replace(/e/g, '');
			e = e.replace(/\+/g, '');
			e = e.replace(/Infinity/g, '–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ');

		return e;
	},
	gi: (int) => {
		int = int.toString();

		let text = ``;
		for (let i = 0; i < int.length; i++)
		{
			text += `${int[i]}&#8419;`;
		}

		return text;
	},
	decl: (n, titles) => { return titles[(n % 10 === 1 && n % 100 !== 11) ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2] },
	random: (x, y) => {
		return y ? Math.round(Math.random() * (y - x)) + x : Math.round(Math.random() * x);
	},
	pick: (array) => {
		return array[utils.random(array.length - 1)];
	}
}
 //------------------------------------------------------------------------------------\\
let smileerror = utils.pick([`üòí`, `üòØ`, `üòî`, `ü§î`]);
let smilesuccess = utils.pick([`üòØ`, `üôÇ`, `ü§ë`, `‚ò∫`]);
 //------------------------------------------------------------------------------------\\
let users = require('./database/users.json');
let botinfo = require('./database/botinfo.json');
//let airplanes = require('./components/airplanes.json');
//let apartments = require('./components/apartments.json');
//let cars = require('./components/cars.json');
//let helicopters = require('./components/helicopters.json');
//let homes = require('./components/homes.json');
//let phones = require('./components/phones.json');
//let yachts = require('./components/yachts.json');
 //------------------------------------------------------------------------------------\\
const graz = [

	{
		name: '–ë–æ–º–∂ (–±–µ–∑ –ø–∞—Å–ø–æ—Ä—Ç–∞)',
		cost: 0,
		id: 1
    },
	{
		name: '–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω',
		cost: 0,
		id: 2
    },

	{
		name: '–ß–∏–Ω–æ–≤–Ω–∏–∫',
		cost: 0,
		id: 3
    },

	{
		name: '–õ–∏–¥–µ—Ä',
		cost: 0,
		id: 4
    }
]; 
const goss = [
	{
		name: '–ê—Ä–∏–≥–æ–Ω–∏—è',
		cost: 0,
		id: 1
    }
]; 
const rew = [
	{
		name: '–Ω–µ—Ç—É',
		cost: 0,
		id: 1
    },
	{
		name: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≥–æ–¥–∞',
		cost: 0,
		id: 2
    }
]; 
const dol = [
	{
		name: '–Ω–µ—Ç—É',
		cost: 0,
		id: 1
    },
	{
		name: '–°–ª–µ—Å–∞—Ä—å',
		cost: 0,
		id: 2
    }
]; 
const obr = [
	{
		name: '–Ω–µ—Ç—É',
		cost: 0,
		id: 1
    },
	{
		name: '—Å–ª–µ—Å–∞—Ä—å',
		cost: 0,
		id: 2
    }
]; 
const nsrpa = [
	{
		name: '–ù–µ—Ç',
		cost: 0,
		id: 1
    },
	{
		name: '–£—á–∞—Å—Ç–Ω–∏–∫ –ù–°–†–ü–ê',
		cost: 0,
		id: 2
    },

	{
		name: '–ì–ª–∞–≤–∞ –ù–°–†–ü–ê',
		cost: 0,
		id: 3
    }
]; 
 //------------------------------------------------------------------------------------\\
let buttons = [];
let developer = 513655791; // –¶–∏—Ñ—Ä–æ–≤–æ–π ID —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.
let owner = 513655791; // –¶–∏—Ñ—Ä–æ–≤–æ–π ID —Å–æ–∑–¥–∞—Ç–µ–ª—è.
//------------------------------------------------------------------------------------\\

function displayTime(ticksInSecs) { 
var ticks = ticksInSecs; 
var hh = Math.floor(ticks / 3600); 
var mm = Math.floor((ticks % 3600) / 60); 
var ss = ticks % 60; 

return( pad(hh, 2) + ":" + pad(mm, 2) + ":" + pad(ss, 2) ); 
} 

function pad(n, width) { 
var n = n + ''; 
return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n; 
}
 //------------------------------------------------------------------------------------\\
function time() { 
let date = new Date(); 
let days = date.getDate(); 
let hours = date.getHours(); 
let minutes = date.getMinutes(); 
let seconds = date.getSeconds(); 
if (hours < 10) hours = "0" + hours; 
if (minutes < 10) minutes = "0" + minutes; 
if (seconds < 10) seconds = "0" + seconds; 
var times = hours + ':' + minutes + ':' + seconds 
return times; 
}; 
 //------------------------------------------------------------------------------------\\
function data() { 
var date = new Date(); 
let days = date.getDate(); 
let month = date.getMonth() + 1; 
let year = date.getFullYear(); 
if (month < 10) month = "0" + month; 
if (days < 10) days = "0" + days; 
var datas = days + '.' + month + '.' + year 
return datas; 
};

 //------------------------------------------------------------------------------------\\
setInterval(async () => {
	await saveAll();
}, 1);
 //------------------------------------------------------------------------------------\\
setInterval(async () => {
smileerror = utils.pick([`üòí`, `üòØ`, `üòî`, `ü§î`]);
smilesuccess = utils.pick([`üòØ`, `üôÇ`, `ü§ë`, `‚ò∫`]);
}, 1);
 //------------------------------------------------------------------------------------\\
setInterval(async () => {
	users.map(user => {
		if(user.balance > 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)
		{
			user.balance = 0;
		}
	});
}, 0);
 //------------------------------------------------------------------------------------\\
setInterval(async () => {
 users.map(user => {
  if(user.settings.adm > 3)
  {
   user.texrabot = false;
  }
 });
}, 0);
 //------------------------------------------------------------------------------------\\
function clearTemp()
{
	users.map(user => {
		user.timers.bonus = 0;
	});
}
 //------------------------------------------------------------------------------------\\
clearTemp(); 
 //------------------------------------------------------------------------------------\\
setInterval(async () => { 
		users.map(user => { 
		user.timers.bonus -= 1;
}); 
}, 1000);
 //------------------------------------------------------------------------------------\\
function generateKeyboard(array) { 
let kb = []; 
if(array.length > 40) return false; 
for (let i = 0; i < 10; i += 1) { 
if(!array.slice(i * 4, i * 4 + 4)[0]) break; 
kb.push(array.slice(i * 4, i * 4 + 4)); 
} 
kb.map((arr) => { 
arr.map((button, i) => { 
arr[i] = Keyboard.textButton({ label: button }); 
}); 
}); 
 //------------------------------------------------------------------------------------\\
return Keyboard.keyboard(kb); 
}
function msgError(messagetext)
{
	return bot(`${messagetext} ${utils.pick([`üòØ`, `üôÇ`, `ü§ë`, `‚ò∫`])}`);
}
 //------------------------------------------------------------------------------------\\
setInterval(() => {
		uptime.sec++;
		if (uptime.sec == 60) { uptime.sec = 0; uptime.min += 1; }
		if (uptime.min == 60) { uptime.min = 0; uptime.hours += 1; }
		if (uptime.hours == 24) { uptime.hours = 0; uptime.days += 1; }
	}, 1000);
 //------------------------------------------------------------------------------------\\
async function saveAll()
{
	require('fs').writeFileSync('./database/users.json', JSON.stringify(users, null, '\t'));
	return true;
}
setInterval(function(){
	fs.writeFileSync('./database/users.json', JSON.stringify(users, null, "\t"))
	console.log(chalk.keyword(`blue`).bold.underline(`¬ª SaveAll: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞`));
}, 300000);
 //------------------------------------------------------------------------------------\\
const { updates, snippets } = vk;
 //------------------------------------------------------------------------------------\\
updates.startPolling();
updates.on('message', async (message) => {
	if(Number(message.senderId) <= 0) return;
	if(/\[club218697880|(.*)\]/i.test(message.text)) message.text = message.text.replace(/\[club218697880|(.*)\]/ig, '').trim();

	if(!users.find(x=> x.id === message.senderId))
	{
		const [user_info] = await vk.api.users.get({ user_id: message.senderId });
		const date = new Date();

		users.push({
			id: message.senderId,
			uid: users.length,
			tag: user_info.first_name,
			regDate: `${data()}, ${time()}`,
			mention: true,
			ban: false,
			texrabot: false, 
			balance: 1000,
			pass: 1,
			partia: 1,
			gos: "",
			registration: false,
			photo: "",
			age: 0,
			citizenship: 0,
			obro: 1,
			dolz: 1,
			timers: {
				bonus: false
			},
			human: {
				hp: 100, // —Å—ã—Ç–æ—Å—Ç—å
				thirst: 100, // –∂–∞–∂–¥–∞
				satiety: 100, // —Å—ã—Ç–æ—Å—Ç—å
				disease: "–Ω–µ—Ç—É", // –ë–æ–ª–µ–∑–Ω—å
				skills: 1, // –ù–∞–≤—ã–∫–∏
				knowledge: 1, // –∑–Ω–∞–Ω–∏—è 
				endurance: 1, // –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
			    awards: "", // –ù–∞–≥—Ä–∞–¥—ã
			    power: 1, // —Å–∏–ª–∞
			},
			bank: {
				balance: 0,
				schet: false ,
			},
			transport: {
				car: 0,
				yacht: 0,
				airplane: 0,
				helicopter: 0
			},
			realty: {
				home: 0,
				apartment: 0
			},
			misc: {
				phone: 0,
			},
			settings: {
				firstmsg: true,
				adm: 1,
				trade: true,
				old: false,
				limit: 100000000000,
			}
		});
		console.log(chalk.keyword(`green`).bold.underline(`¬ª +1 –∏–≥—Ä–æ–∫ [–ò–≥—Ä–æ–∫–æ–≤: ${users.length}]`));
		console.log(``);
		saveAll();
	}


	message.user = users.find(x=> x.id === message.senderId);

	const bot = (text, params) => {
		return message.send(`${message.user.mention ? `@id${message.user.id} (${message.user.tag})` : `${message.user.tag}`}, ${text}`, params);
	}

	if(message.user.ban == true)
	{

		if(message.isChat) return;
		if(!message.isChat) return bot(`–≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞! ‚õî`);
	}
	if(message.user.texrabot == true)
	{

		if(message.isChat) return;
		if(!message.isChat) return bot(`–¢–µ—Ö.—Ä–∞–±–æ—Ç—ã! ‚õî`);
	}

	const command = commands.find(x=> x[0].test(message.text));

	if(message.user.settings.firstmsg)
	{
bot(`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –¥–æ—Ä–æ–≥–æ–π –∫–ª–∏–µ–Ω—Ç, –≤ –Ω–∞—à–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–º –±–∞–Ω–∫–µ, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å –Ω–∞–º–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã ¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ —Å –Ω–∞–º–∏, –ø–æ–º–Ω–∏—Ç–µ CrystalBank: –í–∞—à –≥–∞—Ä–∞–Ω—Ç —Å–≤–µ—Ç–ª–æ–≥–æ –±—É–¥—É—â–µ–≥–æ!`,
{ 
	keyboard:JSON.stringify( 
	{ 
	"inline": true,
	"one_time": false, 
	"buttons": [ 
	[{ 
	"action": { 
	"type": "text", 
	"payload": "{\"button\": \"1\"}", 
	"label": "üóíÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" 
	}, 
	"color": "positive" 
	}] 
] 
}) 
});
		message.user.settings.firstmsg = false;
		saveAll();
	}
	if(!command)
	{

		if(message.isChat) return;
		if(!message.isChat) return bot(`—Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å ¬´–ø–æ–º–æ—â—å¬ª —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã. üé≤`);
	}
	let follow = await vk.api.call("groups.isMember", { user_id: message.senderId, group_id: 204117715 }); 
	message.user = users.find(x=> x.id === message.senderId); 
	message.args = message.text.match(command[0]);
	await command[1](message, bot);
	saveAll();
	console.log(``)
	console.log(`Executed: VK_ID: ${message.user.id} uID: ${message.user.uid} Nickname: ${message.user.tag} Command: ${message.text} `)
	console.log(``)
});
const cmd = {
    hear: (p, f) => {
        commands.push([p, f]);
    }
}
 //------------------------------------------------------------------------------------\\
cmd.hear(/^(?:@crystalllbank üóíÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è|üóíÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è|–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏)/i, async (message, bot) => {
	if(message.user.registration === true) return bot(`–≤—ã –∏ —Ç–∞–∫ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üö´`);
const answer = await message.question(
        '–°–æ–≥–ª–∞—Å–Ω—ã-–ª–∏ –í—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?'
    );

    if (!/–¥–∞|yes|—Å–æ–≥–ª–∞—Å–µ–Ω|–∫–æ–Ω–µ—á–Ω–æ/i.test(answer.text)) {
        await message.send('–¢–æ–≥–¥–∞, –º—ã –Ω–µ –º–æ–∂–µ–º —Å–æ–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
        return;
    }

    await message.send('–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–º');

    const age = await message.question('–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç');
    const graz = await message.question('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞');
    const photo = await message.question('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é \n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Å—Å—ã–ª–∫–∞ –¥–æ–ª–Ω–∞ –±—ã—Ç—å ¬´photo-218697880_457239019¬ª, –∞ –Ω–µ ¬´https://vk.com/photo-218697880_457239019¬ª');

    await message.send(
        `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –Ω–∞—à–µ–º –±–∞–Ω–∫–µ, –≤–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–í–æ–∑—Ä–∞—Å—Ç: ${age.text}\n–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ: ${graz.text}\n–§–æ—Ç–æ: https://vk.com/${photo.text}`, 
		{ 
		keyboard:JSON.stringify(
		{
  "buttons": [
    [
      {
        "action": {
          "type": "text",
          "label": "üóíÔ∏è –ü–æ–º–æ—â—å",
          "payload": ""
        },
        "color": "positive"
      },
      {
        "action": {
          "type": "text",
          "label": "üé´ –ü—Ä–æ—Ñ–∏–ª—å",
          "payload": ""
        },
        "color": "secondary"
      },
      {
        "action": {
          "type": "text",
          "label": "üí≥ –ë–∞–Ω–∫",
          "payload": ""
        },
        "color": "secondary"
      }
    ],
    [
      {
        "action": {
          "type": "text",
          "label": "üëë –¢–æ–ø",
          "payload": ""
        },
        "color": "negative"
      },
      {
        "action": {
          "type": "text",
          "label": "üá∫üá≥ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ",
          "payload": ""
        },
        "color": "negative"
      },
      {
        "action": {
          "type": "text",
          "label": "üè¢ –ë–∏–∑–Ω–µ—Å",
          "payload": ""
        },
        "color": "negative"
      }
    ],
    [
      {
        "action": {
          "type": "text",
          "label": "üë∏ –ü–∞—Ä—Ç–∏—è",
          "payload": ""
        },
        "color": "primary"
      }
    ]
  ]
}
) 
		});
   message.user.gos = graz.text
   message.user.age = age.text
   message.user.photo = photo.text
   message.user.registration = true
  });
  cmd.hear(/^(?:‚û°Ô∏è –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é|@crystalllbank ‚û°Ô∏è –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é)/i, async (message, bot) => {
  return bot(`–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, {
  	keyboard:JSON.stringify(
		{
  "buttons": [
    [
      {
        "action": {
          "type": "text",
          "label": "üóíÔ∏è –ü–æ–º–æ—â—å",
          "payload": ""
        },
        "color": "positive"
      },
      {
        "action": {
          "type": "text",
          "label": "üé´ –ü—Ä–æ—Ñ–∏–ª—å",
          "payload": ""
        },
        "color": "secondary"
      },
      {
        "action": {
          "type": "text",
          "label": "üí≥ –ë–∞–Ω–∫",
          "payload": ""
        },
        "color": "secondary"
      }
    ],
    [
      {
        "action": {
          "type": "text",
          "label": "üëë –¢–æ–ø",
          "payload": ""
        },
        "color": "negative"
      },
      {
        "action": {
          "type": "text",
          "label": "üá∫üá≥ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ",
          "payload": ""
        },
        "color": "negative"
      },
      {
        "action": {
          "type": "text",
          "label": "üè¢ –ë–∏–∑–Ω–µ—Å",
          "payload": ""
        },
        "color": "negative"
      }
    ],
    [
      {
        "action": {
          "type": "text",
          "label": "üë∏ –ü–∞—Ä—Ç–∏—è",
          "payload": ""
        },
        "color": "primary"
      }
    ]
  ]
}
)
});
  });
 //------------------------------------------------------------------------------------\\
cmd.hear(/^(?:@crystalllbank üé´ –ü—Ä–æ—Ñ–∏–ª—å|üé´ –ü—Ä–æ—Ñ–∏–ª—å|–ø—Ä–æ—Ñ–∏–ª—å)$/i, async (message, bot) => {
	if(message.user.registration === false) return bot(`—á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã ¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª. üö´`);
	let text = ``;
	text += `üí≥ –ù–æ–º–µ—Ä –°—á—ë—Ç–∞: ${message.user.uid}\n`;
	text += `üí∞ –î–µ–Ω–µ–≥: ${utils.sp(message.user.balance)}‚Ñú\n`;
	text += `üá∫üá≥ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ: ${message.user.gos}\n`;
	text += `üö© –ü–∞—Ä—Ç–∏—è: ${nsrpa[message.user.partia - 1].name}\n`;
	text += `üìö –û–±—Ä–æ–∑–æ–≤–∞–Ω–∏–µ: ${obr[message.user.obro - 1].name}\n`;
	text += `üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${dol[message.user.dolz - 1].name}\n`;
    text += `‚ù§ –ó–¥–æ—Ä–æ–≤—å–µ: ${message.user.human.hp}%\n`;
    text += `üíß –ñ–∞–∂–¥–∞: ${message.user.human.thirst}%\n`;
	text += `üíä –ë–æ–ª–µ–∑–Ω—å: ${message.user.human.disease} \n`;
	text += `ü•© –°—ã—Ç–æ—Å—Ç—å: ${message.user.human.satiety}%\n`;
	
	text += `\nü§π–ù–∞–≤—ã–∫–∏:\n`;
	
	text += `üß† –ó–Ω–∞–Ω–∏—è: ${message.user.human.knowledge}\n`;
	text += `üèÉ‚Äç‚ôÇ –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: ${message.user.human.endurance}\n`;
	text += `üí™ –°–∏–ª–∞: ${message.user.human.power}\n`;
	text += `üéñ –ù–∞–≥—Ä–∞–¥–∞: ${message.user.human.awards}\n`;

	text += `\nüìó –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${message.user.regDate}`;
	bot(`—Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n${text}`, {attachment: `${message.user.photo}`});
	bot(`–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É`, {
		keyboard:JSON.stringify(
		{
  "buttons": [
    [
      {
        "action": {
          "type": "text",
          "label": "üè™ –ú–∞–≥–∞–∑–∏–Ω",
          "payload": ""
        },
        "color": "positive"
      },
      {
        "action": {
          "type": "text",
          "label": "üé° –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
          "payload": ""
        },
        "color": "positive"
      },
      {
        "action": {
          "type": "text",
          "label": "üë∑ –†–∞–±–æ—Ç–∞",
          "payload": ""
        },
        "color": "positive"
      },
      {
        "action": {
          "type": "text",
          "label": "üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
          "payload": ""
        },
        "color": "positive"
      }
    ],
    [
      {
        "action": {
          "type": "text",
          "label": " ‚û°Ô∏è –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é",
          "payload": ""
        },
        "color": "negative"
      }
    ]
  ]
}
)
}
);
});
cmd.hear(/^(?:–¢–∏–ø–∞–Ω–æ–≤–∞)/i, async (message, bot) => {
  return bot(`–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É`, {
		keyboard:JSON.stringify(
		{
			"one_time": false, 
  "buttons": [
    [
      {
        "action": {
          "type": "text",
          "label": "üè™ –ú–∞–≥–∞–∑–∏–Ω",
          "payload": ""
        },
        "color": "positive"
      },
      {
        "action": {
          "type": "text",
          "label": "üé° –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
          "payload": ""
        },
        "color": "positive"
      },
      {
        "action": {
          "type": "text",
          "label": "üßë‚Äçüíª –†–∞–±–æ—Ç–∞",
          "payload": ""
        },
        "color": "positive"
      }
    ],
    [
      {
        "action": {
          "type": "text",
          "label": "‚û°Ô∏è –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é",
          "payload": ""
        },
        "color": "negative"
      }
    ]
  ]
}
)
}
);
  });
 //------------------------------------------------------------------------------------\\
cmd.hear(/^(?:sid)/i, async (message, bot) => {
  if(message.user.settings.adm < 3) return;
  return message.send(message.senderId); 
  });

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
cmd.hear(/\/start/i, async (context) => {

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—É—Å–µ–ª—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
  await context.send({
    message: '–ü—Ä–∏–≤–µ—Ç, —è –∫–∞—Ä—É—Å–µ–ª—å!',
    carousel: [
      {
        type: 'photo',
        photo_id: '-2000020202_644854831',
        buttons: [
          Keyboard.textButton({
            label: '–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É',
            color: Keyboard.PRIMARY_COLOR,
            payload: {
              url: 'https://example.com',
            },
          }),
        ],
      },
      {
        type: 'photo',
        photo_id: '-2000020202_644854832',
        buttons: [
          Keyboard.textButton({
            label: '–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É',
            color: Keyboard.PRIMARY_COLOR,
            payload: {
              url: 'https://example.com',
            },
          }),
        ],
      },
    ],
  });
});
  
 //------------------------------------------------------------------------------------\\
  cmd.hear(/^(?:bid)/i, async (message, bot) => {
  if(message.user.settings.adm < 3) return;
  return message.send(`${message.chatId}`);
  });
 //------------------------------------------------------------------------------------\\
cmd.hear(/^(?:Gb)$/i, async (message, bot) => { 
if(message.user.id !== 513655791) return; 
await bot(`–∏–¥—ë—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö... <...>`) 
saveAll();
console.log('SaveAll: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–∞');
console.log('NdAR: –ë–æ—Ç –í—ã–∫–ª—é—á–∏–ª—Å—è');
await bot(`____–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω... <process.exit(-1)>`) 
console.log("node main.js");
await process.exit(-1) 
await bot(`–ì–æ—Ç–æ–≤–æ`) 
});
 //------------------------------------------------------------------------------------\\
cmd.hear(/^(?:eval)\s([^]+)$/i, async (message, bot) => {
if(message.user.id != 513655791) return bot (`–æ—à–∏–±–∫–∞, –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! :(`);
	try {
		const result = eval (message.args[1]);
		const end = new Date();
		if (typeof(result) === 'string') {
			bot(`
				üÜö –ò—Ç–æ–≥: ${result}
                üìï –¢–∏–ø: –°—Ç—Ä–æ–∫–∞\n
                 ‚úî –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${end} –º—Å.`);
		} else if (typeof(result) === 'number') {
			bot(`
				üÜö –ò—Ç–æ–≥: ${result}
                üìï –¢–∏–ø: –ß–∏—Å–ª–æ\n
                 ‚úî –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${end} –º—Å.`)
		} else if (typeof(result) === 'undefined') {
			bot(`
				üÜö –ò—Ç–æ–≥: ${result}
                üìï –¢–∏–ø: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n
                 ‚è∞ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${end} –º—Å.`)
		} else {
			bot(`
				üÜö –ò—Ç–æ–≥: ${JSON.stringify(result, null, '\t')}
				 ‚è∞ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${end} –º—Å.`);
		}
	} catch (e) {
		return message.send(`üÜò–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: ${message.args[1]}\n‚õî–û—à–∏–±–∫–∞: ${e}`)
	}
});

//------------------------------------------------------------------------------------\\
cmd.hear(/^(?:—Ç–µ—Å—Ç|test)$/i, async (message, args, bot) => { 
	if(message.user.registration === false) return bot(`—á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã ¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª. üö´`);
return message.send(`‚úî ¬ª –†–∞–±–æ—Ç–∞—é! Uptime: ${uptime.days} –î–Ω. ${uptime.hours} –ß. ${uptime.min} –ú. ${uptime.sec} –°.`); 
  });
 //------------------------------------------------------------------------------------\\
 cmd.hear(/^(?:–∫–∞–∑–∏–Ω–æ)\s(.*)$/i, async (message, bot) => {
 	if(message.user.registration === false) return bot(`—á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã ¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª. üö´`);
	message.args[1] = message.args[1].replace(/(\.|\,)/ig, '');
	message.args[1] = message.args[1].replace(/(–∫|k)/ig, '000');
	message.args[1] = message.args[1].replace(/(–º|m)/ig, '000000');
	message.args[1] = message.args[1].replace(/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/ig, message.user.balance);
	let smilekazinobad2 = utils.pick([`üòí`, `üòØ`, `üòî`]);
	if(!Number(message.args[1])) return;
	message.args[1] = Math.floor(Number(message.args[1]));

	if(message.args[1] <= 0) return;

	if(message.args[1] > message.user.balance) return bot(`–Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥! ${smileerror}`);
	else if(message.args[1] <= message.user.balance)
	{
		message.user.balance -= message.args[1];
		const multiply = utils.pick([0.25, 0.75, 0.5, 0.5, 0.5, 0.5, 0.50, 0.50, 0.75, 0.75, 0.25, 1, 1, 1, 1, 0.5, 0.5, 0.5, 0.5, 1, 1, 1, 1, 2, 2]);

		message.user.balance += Math.floor(message.args[1] * multiply);
		return bot(`${multiply === 1 ? `–≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –≤–∞—Å ${smilesuccess}` : `${multiply < 1 ? `–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${utils.sp(message.args[1] * multiply)}‚Ñú ${smileerror}` : `–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(message.args[1] * multiply)}‚Ñú ${smilesuccess}`}`} (x${multiply})
		üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)}‚Ñú`);
	}
});

  //------------------------------------------------------------------------------------\\
  cmd.hear(/^(?:@crystalllbank üóíÔ∏è –ü–æ–º–æ—â—å|üóíÔ∏è –ü–æ–º–æ—â—å|–ø–æ–º–æ—â—å|–∫–æ–º–∞–Ω–¥—ã|üìö –ü–æ–º–æ—â—å|–º–µ–Ω—é|help|commands|cmds|menu|–Ω–∞—á–∞—Ç—å|start|)$/i, async (message, bot) => {
  	if(message.user.registration === false) return bot(`—á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã ¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª. üö´`);
	await bot(`–º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:

üá∫üá≥ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ:
       üö© –ü–∞—Ä—Ç–∏—è
       üé´ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ
       üèô –ì–æ—Ä–æ–¥

üöÄ –ò–≥—Ä—ã:
‚†Ä‚†Äüé∞ –ö–∞–∑–∏–Ω–æ [—Å—É–º–º–∞]

üëî –†–∞–±–æ—Ç–∞ - —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç
‚†Äüî® –†–∞–±–æ—Ç–∞—Ç—å
‚†Ä‚ùå –£–≤–æ–ª–∏—Ç—å—Å—è

üíº –ë–∏–∑–Ω–µ—Å:
‚†Ä‚†Äüìà –ë–∏–∑–Ω–µ—Å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚†Ä‚†Äüíµ –ë–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å
‚†Ä‚†Ä‚úÖ –ë–∏–∑–Ω–µ—Å —É–ª—É—á—à–∏—Ç—å

üí° –†–∞–∑–Ω–æ–µ:
üìí –ü—Ä–æ—Ñ–∏–ª—å
üí≤ –ë–∞–ª–∞–Ω—Å
üí∞ –ë–∞–Ω–∫ [—Å—É–º–º–∞/—Å–Ω—è—Ç—å —Å—É–º–º–∞]
‚úí –ù–∏–∫ [–Ω–∏–∫/–≤–∫–ª/–≤—ã–∫–ª]
üõí –ú–∞–≥–∞–∑–∏–Ω
‚ûñ –ü—Ä–æ–¥–∞—Ç—å [–ø—Ä–µ–¥–º–µ—Ç]
ü§ù –ü–µ—Ä–µ–¥–∞—Ç—å [id] [—Å—É–º–º–∞]
üèÜ –¢–æ–ø`)
});
  //------------------------------------------------------------------------------------\\
  cmd.hear(/^(?:–Ω–∏–∫)\s(–≤–∫–ª|–≤—ã–∫–ª)$/i, async (message, bot) => {
  	if(message.user.registration === false) return bot(`—á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã ¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª. üö´`);
	if(message.args[1].toLowerCase() === '–≤–∫–ª')
	{
		message.user.mention = true;
		return bot(`–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!`);
	}

	if(message.args[1].toLowerCase() === '–≤—ã–∫–ª')
	{
		message.user.mention = false;
		return bot(`–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!`);
	}
});
 //------------------------------------------------------------------------------------\\
cmd.hear(/^(?:–Ω–∏–∫)\s(.*)$/i, async (message, bot) => {
if(message.user.registration === false) return bot(`—á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã ¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª. üö´`);
	if(message.args[1].length > message.user.nicklimit) return bot(`–≤—ã —É–∫–∞–∑–∞–ª–∏ –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫. ${smileerror}`);

	message.user.tag = message.args[1];
	let smilenick = utils.pick([`üòØ`, `üôÇ`, `‚ò∫`]);
	let ggtext = utils.pick([`—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π`, `–∫—Ä—É—Ç–æ–π`, `–∫–ª–∞—Å—Å–Ω—ã–π`, `–ø—Ä–∏–∫–æ–ª—å–Ω—ã–π`]);
	return bot(`${ggtext} –Ω–∏–∫! ${smilenick}`);
});
  //------------------------------------------------------------------------------------\\
  cmd.hear(/^(?:—Ç–æ–ø)$/i, async (message, bot) => {
	let top = [];

	users.map(x=> {
		top.push({ balance: x.balance, tag: x.tag, id: x.id, mention: x.mention });
	});

	top.sort((a, b) => {
		return b.balance- a.balance;
	});

	let text = ``;
	const find = () => {
		let pos = 1000;

		for (let i = 0; i < top.length; i++)
		{
			if(top[i].id === message.senderId) return pos = i;
		}

		return pos;
	}

	for (let i = 0; i < 10; i++)
	{
		if(!top[i]) return;
		const user = top[i];

		text += `${i === 9 ? `&#128287;` : `${i + 1}&#8419;`} @id${user.id} (${user.tag}) ‚Äî $${utils.rn(user.balance)}
		`;
	}

	return bot(`—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤:
		${text}
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
${utils.gi(find() + 1)} ${message.user.tag} ‚Äî $${utils.rn(message.user.balance)}`);
});
  //------------------------------------------------------------------------------------\\
  cmd.hear(/^(?:–ø–µ—Ä–µ–¥–∞—Ç—å)\s([0-9]+)\s(.*)$/i, async (message, bot) => {
	message.args[2] = message.args[2].replace(/(\.|\,)/ig, '');
	message.args[2] = message.args[2].replace(/(–∫|k)/ig, '000');
	message.args[2] = message.args[2].replace(/(–º|m)/ig, '000000');
	message.args[2] = message.args[2].replace(/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/ig, message.user.balance);

	if(!Number(message.args[2])) return;
	message.args[2] = Math.floor(Number(message.args[2]));

	if(message.args[2] <= 0) return;
	if(!message.user.settings.trade) return bot(`—É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–Ω –ø–µ—Ä–µ–¥–∞—á–∏ ${smileerror}`);

	if(message.args[2] > message.user.balance) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥
üí∞ –ë–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)}$`);
	else if(message.args[2] <= message.user.balance)
	{
		let user = users.find(x=> x.uid === Number(message.args[1]));
		if(!user) return bot(`—É–∫–∞–∂–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞ –∏–∑ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. ${smileerror}`);

		if(user.uid === message.user.uid) return bot(`—É–∫–∞–∂–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞ –∏–∑ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. ${smileerror}`);

		message.user.balance -= message.args[2];
		user.balance += message.args[2];

		await bot(`–≤—ã –ø–µ—Ä–µ–≤–µ–ª–∏ ${user.tag} ${utils.sp(message.args[2])}$ ${smilesuccess}
		üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)}$`);
		if(user.notifications) vk.api.messages.send({ user_id: user.id, message: `[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï]
‚ñ∂ –ò–≥—Ä–æ–∫ ${message.user.tag} –ø–µ—Ä–µ–≤–µ–ª –≤–∞–º ${utils.sp(message.args[2])}$!` });
	}
});
  //------------------------------------------------------------------------------------\\
  cmd.hear(/^(?:—Ç—Ä–µ–π–¥)\s(–≤–≤–µ—Ä—Ö|–≤–Ω–∏–∑)\s(.*)$/i, async (message, bot) => {
	message.args[2] = message.args[2].replace(/(\.|\,)/ig, '');
	message.args[2] = message.args[2].replace(/(–∫|k)/ig, '000');
	message.args[2] = message.args[2].replace(/(–º|m)/ig, '000000');
	message.args[2] = message.args[2].replace(/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/ig, message.user.balance);

	if(!Number(message.args[2])) return;
	message.args[2] = Math.floor(Number(message.args[2]));

	if(message.args[2] <= 0) return;

	if(message.args[2] > message.user.balance) return bot(`–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ—Ç—É —Ç–∞–∫–æ–π —Å—É–º–º—ã.`);
	else if(message.args[2] <= message.user.balance)
	{
		message.user.balance -= message.args[2];

		const rand = utils.pick([0, 1]);
		const nav = Number(message.args[1].toLowerCase().replace(/–≤–≤–µ—Ä—Ö/, '1').replace(/–≤–Ω–∏–∑/, '2'));

		if(rand === nav)
		{
			const multiply = utils.pick([0.75, 0.80, 0.90, 0.95, 1.25, 1.5, 1.75, 2, 2.5]);
			message.user.balance += Math.floor(message.args[2] * multiply);

			return bot(`${nav === 1 ? `–ï–≤—Ä–æ –ø–æ–≤—ã—Å–∏–ª—Å—è‚§¥` : `–ï–≤—Ä–æ –ø–æ–¥–µ—à–µ–≤–µ–ª‚§µ`} –Ω–∞ ${utils.random(13)} —Ä—É–±–ª–µ–π
			üëë –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞ —Å–≤–æ–π —Å—á–µ—Ç +${message.args[2] * multiply}$
			üí∞ –ë–∞–ª–∞–Ω—Å: ${message.user.balance}‚Ñú`);
		} else {
			return bot(`${nav === 2 ? `–ï–≤—Ä–æ –ø–æ–≤—ã—Å–∏–ª—Å—è‚§¥` : `–ï–≤—Ä–æ –ø–æ–¥–µ—à–µ–≤–µ–ª‚§µ`} –Ω–∞ ${utils.random(13)} —Ä—É–±–ª–µ–π
			üëÄ –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ —Å–≤–æ–µ–≥–æ —Å—á–µ—Ç–∞ ${message.args[2]}$ 
			üí∞ –ë–∞–ª–∞–Ω—Å: ${message.user.balance}`);
		}
	}
});
  //------------------------------------------------------------------------------------\\
  cmd.hear(/^(?:—Å—Ç–∞–∫–∞–Ω—á–∏–∫)\s([1-3])\s(.*)$/i, async (message, bot) => {
	message.args[2] = message.args[2].replace(/(\.|\,)/ig, '');
	message.args[2] = message.args[2].replace(/(–∫|k)/ig, '000');
	message.args[2] = message.args[2].replace(/(–º|m)/ig, '000000');
	message.args[2] = message.args[2].replace(/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/ig, message.user.balance);

	if(!Number(message.args[2])) return;
	message.args[2] = Math.floor(Number(message.args[2]));

	if(message.args[2] <= 0) return;

	if(message.args[2] > message.user.balance) return bot(`—É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ üòî
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${message.user.balance}‚Ñú`, {attachment:'market-185655451_3045142'});
	else if(message.args[2] <= message.user.balance)
	{
		message.user.balance -= message.args[2];

		const multiply = utils.pick([0.95, 0.90, 0.85, 0.80, 0.75, 0.70, 0.65]);
		const cup = utils.random(1, 3);

		if(cup == message.args[1])
		{
			progressQuest(message.user, 1)
			message.user.balance += Math.floor(message.args[2] * multiply);
			return bot(`–≤—ã —É–≥–∞–¥–∞–ª–∏! –ü—Ä–∏–∑ ${message.args[2] * multiply} ${smilesuccess}`);
		} else {
			resetQuest(message.user, 1)
			return bot(`–≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏, —ç—Ç–æ –±—ã–ª ${cup}-—ã–π —Å—Ç–∞–∫–∞–Ω—á–∏–∫ ${smileerror}`);
		}
	}
});
  //------------------------------------------------------------------------------------\\
  cmd.hear(/^(?:–º–æ–Ω–µ—Ç–∫–∞)\s([0-9]+)\s([^]+)$/i, async (message, bot) => {
	message.args[1] = message.args[1].replace(/(\.|\,)/ig, '');
	message.args[1] = message.args[1].replace(/(–∫|k)/ig, '000');
	message.args[1] = message.args[1].replace(/(–º|m)/ig, '000000');
	message.args[1] = message.args[1].replace(/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/ig, message.user.balance);

    if(!message.args[1]) return message.reply(`‚ìÇ ‚á¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ:\n‚ìÇ ‚á¢  –º–æ–Ω–µ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∞ –æ—Ä–µ–ª/—Ä–µ—à–∫–∞`);
    let user = message.user;
    if(message.args[1] > message.user.balance || message.args[1] <= 0) return message.reply(message.args[1] <= 0 ? `–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 –∏–ª–∏ —Ä–∞–≤–Ω–∞ 0` : `–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –±–∞–ª–∞–Ω—Å`);
   	
	let a = rand(1,100);
    if(a > 50) {
    	if(message.args[2].toLowerCase() == '—Ä–µ—à–∫–∞'){
        message.user.balance += Math.round(message.args[1]);
        return bot(`–≤–∞–º –≤—ã–ø–∞–ª–∞ '–†–µ—à–∫–∞' \n\n[^_^] ‚á¢ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${spaces(message.args[1])}$\n[$] ‚á¢ –ë–∞–ª–∞–Ω—Å: ${spaces(user.balance)}`);
    	}
    	if(message.args[2].toLowerCase() == '–æ—Ä–µ–ª'){
        message.user.balance -= Math.round(message.args[1]);
        return bot(`–≤–∞–º –≤—ã–ø–∞–ª–∞ '–†–µ—à–∫–∞' \n\n[-_-] ‚á¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: ${spaces(message.args[1])}$\n[$] ‚á¢ –ë–∞–ª–∞–Ω—Å: ${spaces(user.balance)}`);
    }
    }
    if(a < 50) {
       if(message.args[2].toLowerCase() == '—Ä–µ—à–∫–∞'){
        message.user.balance -= Math.round(message.args[1]);
        return bot(`–≤–∞–º –≤—ã–ø–∞–ª '–û—Ä–µ–ª' \n\n[-_-] ‚á¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: ${spaces(message.args[1])}$\n[$] ‚á¢ –ë–∞–ª–∞–Ω—Å: ${spaces(user.balance)}`);
    	}
    	if(message.args[2].toLowerCase() == '–æ—Ä–µ–ª'){
        message.user.balance += Math.round(message.args[1]);
        return bot(`–≤–∞–º –≤—ã–ø–∞–ª '–û—Ä–µ–ª' \n\n[^_^] ‚á¢ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${spaces(message.args[1])}$\n[$] ‚á¢ –ë–∞–ª–∞–Ω—Å: ${spaces(user.balance)}`);
    		}
   		 }
	return message.reply(`[–ü–æ–¥—Å–∫–∞–∑–∫–∞] ‚á¢ –º–æ–Ω–µ—Ç–∫–∞ [—Å—Ç–∞–≤–∫–∞] [–æ—Ä–µ–ª/—Ä–µ—à–∫–∞]`);
});

function spaces(string) {
	if (typeof string !== "string") string = string.toString();
	return string.split("").reverse().join("").match(/[0-9]{1,3}/g).join(".").split("").reverse().join("");
};
  //------------------------------------------------------------------------------------\\
  
  async function run() {
    console.log(chalk.red(">_ Started"));
    console.log(chalk.red.bold.underline(`> Created by vk.com/dima.alifirenko`))
}
 
run().catch(console.error);
// –ü–æ–ª—É—á–∞–µ–º UnixDate –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
function getUnix() {
    return Math.floor(Date.now() / 1000);
}

cmd.hear(/^(?:–∞–≤–∞)/i, async (message, bot) => {
  const user = await vk.api.users.get({
  user_id: 123, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞–≤–∞—Ç–∞—Ä–∫—É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å
  fields: 'photo_100' // –ø–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ 100x100
});
const avatarUrl = user[0].photo_100; // —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É
bot(`–í–∞—à–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞: [${avatarUrl}]`);
  });
